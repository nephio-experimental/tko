#!/bin/bash
set -e

HERE=$(dirname "$(readlink --canonicalize "$BASH_SOURCE")")
. "$HERE/_env"
. "$HERE/_trap"

not_root

TIMEOUT=180s

function clean_volumes () {
	# If we don't clean /tmp/tko-docker, Docker-in-Docker (and thus Kind) will get confused with existing data
	# See: assets/kubernetes/kind/tko.yaml
	m 'cleaning volumes (via sudo)...'
	sudo rm --recursive --force /tmp/tko/
	sudo mkdir --parents /tmp/tko/postgresql /tmp/tko/docker /tmp/tko/awx-projects
}

if [ "$1" == -c ]; then
	m 'deleting cluster...'
	kind delete cluster --name=tko || true
	clean_volumes
fi

# if [ ! -d /var/local-path-provisioner ]; then
# 	m 'setting up Kind local path provisioner for "standard" storage class (via sudo)...'
# 	sudo mkdir --parents /var/local-path-provisioner
# 	sudo chown "$SUDO_USER" /var/local-path-provisioner
# fi

cat "$ROOT/assets/kubernetes/_kustomization.yaml" |
DOCKER_REPOSITORY=$DOCKER_REPOSITORY DOCKER_REGISTRY=$DOCKER_REGISTRY POSTGRESQL_VERSION=$POSTGRESQL_VERSION DIND_VERSION=$DIND_VERSION \
envsubst > "$ROOT/assets/kubernetes/kustomization.yaml"

if [ "$1" == -d ]; then
	m 'deleting TKO...'
	"$HERE/kubectl-kind" delete --kustomize="$ROOT/assets/kubernetes/" || true

	m 'waiting for TKO deletion...'
	kubectl wait deployment/postgresql --timeout="$TIMEOUT" --for=delete
	kubectl wait pod/tko-runner --timeout="$TIMEOUT" --for=delete
	clean_volumes
	kubectl wait namespace/tko --timeout="$TIMEOUT" --for=delete
	kubectl wait apiservice/v1alpha1.tko.nephio.org --timeout="$TIMEOUT" --for=delete
else
	m 'creating cluster...'
	kind create cluster --config="$ROOT/assets/kubernetes/kind/tko.yaml" || true
fi

m 'deploying TKO...'

"$HERE/kubectl-kind" apply --kustomize="$ROOT/assets/kubernetes/"

m 'waiting for TKO...'

"$HERE/kubectl-kind" wait deployment/postgresql --timeout="$TIMEOUT" --for=condition=available --namespace=tko
"$HERE/kubectl-kind" wait deployment/tko-data --timeout="$TIMEOUT" --for=condition=available --namespace=tko
"$HERE/kubectl-kind" wait deployment/tko-preparer --timeout="$TIMEOUT" --for=condition=available --namespace=tko
"$HERE/kubectl-kind" wait deployment/tko-meta-scheduler --timeout="$TIMEOUT" --for=condition=available --namespace=tko
"$HERE/kubectl-kind" wait pod/tko-runner --timeout="$TIMEOUT" --for=condition=ready --namespace=tko
"$HERE/kubectl-kind" wait apiservice/v1alpha1.tko.nephio.org --timeout="$TIMEOUT" --for=condition=available

m 'deleting workload clusters...'

"$HERE/kind-runner" kind delete cluster --name=edge1 || true
"$HERE/kind-runner" kind delete cluster --name=edge2 || true

m 'applying KRM...'

"$HERE/kubectl-kind" apply --filename="$ROOT/examples/kubernetes/templates.yaml"
"$HERE/kubectl-kind" apply --filename="$ROOT/examples/kubernetes/sites.yaml"
"$HERE/kubectl-kind" create --filename="$ROOT/examples/kubernetes/deployments.yaml"

"$HERE/test-scenario" remote "$HERE/tko-kind"
